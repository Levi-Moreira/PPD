package view;

import presenter.ServerPresenter;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.Socket;
import java.net.SocketException;
import java.util.Collections;
import java.util.Enumeration;

/**
 * Created by ellca on 22/04/2017.
 */
public class ServerWindow implements ServerView {
    private JPanel panel1;
    private JTextArea taOutput;
    private JPanel jpOutput;
    boolean start = false;
    JFrame window;

    private ServerPresenter presenter;

    public ServerWindow(JFrame wid) {
        window = wid;
        window.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        presenter = new ServerPresenter(this);
    }


    @Override
    public boolean getStart() {
        return start;
    }

    @Override
    public void printToArea(String txt) {
        taOutput.append(txt + "\n");

    }


    /**
     * Used to show the interfaces so the user can know to which he can connect
     *
     * @param netint
     * @param serverGui
     * @throws SocketException
     */
    public void displayInterfaceInformation(NetworkInterface netint, ServerWindow serverGui) throws SocketException {

        Enumeration<InetAddress> inetAddresses = netint.getInetAddresses();
        for (InetAddress inetAddress : Collections.list(inetAddresses)) {
            if (inetAddress != null && !inetAddress.isLoopbackAddress() && !inetAddress.isLinkLocalAddress())
                this.printToArea("IP Address: " + inetAddress + "\n");
        }

    }


    @Override
    public void close() {
        System.exit(0);
    }

    public void startUpServer() {
        presenter.startUpServer();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        jpOutput = new JPanel();
        jpOutput.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        panel1.add(jpOutput, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        jpOutput.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null));
        final JScrollPane scrollPane1 = new JScrollPane();
        jpOutput.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        taOutput = new JTextArea();
        taOutput.setFont(new Font("Montserrat", taOutput.getFont().getStyle(), 16));
        taOutput.setLineWrap(true);
        scrollPane1.setViewportView(taOutput);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
